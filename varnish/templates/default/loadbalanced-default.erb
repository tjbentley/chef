
probe main{
  .url = "/";
  .timeout = <%= node['varnish']['probe_timeout'] %>;
  .interval = 2s;
  .window = 5;
  .threshold = 3;
}

backend web1{
  .host = "<%= node['varnish']['backend_host1'] %>";
  .port = "<%= node['varnish']['backend_host1_port'] %>";
  .probe = main;
}

backend web2{
  .host = "<%= node['varnish']['backend_host2'] %>";
  .port = "<%= node['varnish']['backend_host2_port'] %>";
  .probe = main;
}

#director dr1 round-robin{
#  { .backend = web1; }
#  { .backend = web2; }
#}

director default_director client{
  { .backend = web1; .weight= 1; }
  { .backend = web2; .weight= 1; }
}



# Below is a commented-out copy of the default VCL logic.  If you
# redefine any of these subroutines, the built-in logic will be
# appended to your code.
 sub vcl_recv {
     set req.backend = default_director;

     # Allow the backend to serve up stale content if it is responding slowly.
     set req.grace = <%= node['varnish']['backend_stale_grace_period'] %>;

     if (req.restarts == 0) {
        if (req.http.x-forwarded-for) {
            set req.http.X-Forwarded-For =
                req.http.X-Forwarded-For + ", " + client.ip;
        } else {
            set req.http.X-Forwarded-For = client.ip;
        }
     }

  # Handle compression correctly. Different browsers send different
  # "Accept-Encoding" headers, even though they mostly all support the same
  # compression mechanisms. By consolidating these compression headers into
  # a consistent format, we can reduce the size of the cache and get more hits.=
  # @see: http:// varnish.projects.linpro.no/wiki/FAQ/Compression
  if (req.http.Accept-Encoding) {
    if (req.http.Accept-Encoding ~ "gzip") {
      # If the browser supports it, we'll use gzip.
      set req.http.Accept-Encoding = "gzip";
    }
    else if (req.http.Accept-Encoding ~ "deflate") {
      # Next, try deflate if it is supported.
      set req.http.Accept-Encoding = "deflate";
    }
    else {
      # Unknown algorithm. Remove it and send unencoded.
      unset req.http.Accept-Encoding;
    }
  }


     if (req.request != "GET" &&
       req.request != "HEAD" &&
       req.request != "PUT" &&
       req.request != "POST" &&
       req.request != "TRACE" &&
       req.request != "OPTIONS" &&
       req.request != "DELETE") {
         /* Non-RFC2616 or CONNECT which is weird. */
         return (pipe);
     }
     if (req.request != "GET" && req.request != "HEAD") {
         /* We only deal with GET and HEAD by default */
         return (pass);
     }
     if (req.http.Authorization || req.http.Cookie) {
         /* Not cacheable by default */
         return (pass);
     }

     if (req.url ~ "\.(png|gif|jpeg|jpg|ico|swf|css|js|txt|xml)"
        || req.url ~ "/assets/"
        || req.url ~ "/images/") {
                unset req.http.cookie;
     }

     return (lookup);
 }

# Code determining what to do when serving items from the Apache servers.
sub vcl_fetch {
  # Don't allow static files to set cookies.
  if (req.url ~ "(?i)\.(png|gif|jpeg|jpg|ico|swf|css|js|html|htm)(\?[a-z0-9]+)?$") {
    # beresp == Back-end response from the web server.
    unset beresp.http.set-cookie;
  }

  # Allow items to be stale if needed.
  set beresp.grace = <%= node['varnish']['backend_stale_grace_period'] %>;
}


